# -*- coding: utf-8 -*-
"""Data_Science_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RmqBdk53D9NgDrfQG14T23Utiu15xrC4
"""

!pip install seaborn

from google.colab import drive
drive.mount('/content/drive')

!git config --global user.name 'Iditc'
!git config --global user.email 'cohen.idit10@gmail.com'
!git config --global user.password 'Cvpw4hJS936nm'

token = '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'
username = 'Iditc'
repo = 'data_scientists_course'



"""# Data Science Project: Titanic Survival Analysis

In this project, we will analyze the Titanic dataset to understand the factors that influenced passenger survival. We will perform data cleaning, exploratory data analysis (EDA), and build a simple machine learning model to predict survival.
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing essential libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# For machine learning
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Setting up visualizations
# %matplotlib inline
sns.set(style="whitegrid")

# Loading the Titanic dataset from Seaborn
titanic = sns.load_dataset('titanic')

# Displaying the first five rows
titanic.head()

"""## Dataset Overview

The Titanic dataset contains information about the passengers aboard the Titanic, including demographics, ticket information, and survival status. Here are the key columns:

- **survived**: Whether the passenger survived (1) or not (0).
- **pclass**: Passenger class (1 = 1st, 2 = 2nd, 3 = 3rd).
- **sex**: Gender of the passenger.
- **age**: Age of the passenger.
- **sibsp**: Number of siblings/spouses aboard.
- **parch**: Number of parents/children aboard.
- **fare**: Fare paid for the ticket.
- **embarked**: Port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton).
- **class**: Passenger class as a categorical variable.
- **who**: Passenger category (man, woman, child).
- **adult_male**: Whether the passenger is an adult male.
- **deck**: Deck where the passenger stayed.
- **embark_town**: Town of embarkation.
- **alive**: Alive or dead status.
- **alone**: Whether the passenger was alone.

"""

# Checking for missing values
titanic.isnull().sum()

"""## Data Cleaning

Before analysis, it's essential to handle missing values to ensure the integrity of our model. Here's how we'll address missing data:
- **Age**: We'll fill missing values with the median age.
- **Embarked**: We'll fill missing values with the mode (most common value).
- **Deck**: Since a significant portion of data is missing, we'll drop this column.
"""

# Filling missing 'age' values with the median age
titanic['age'].fillna(titanic['age'].median(), inplace=True)

# Filling missing 'embarked' values with the mode
titanic['embarked'].fillna(titanic['embarked'].mode()[0], inplace=True)

# Dropping the 'deck' column due to excessive missing values
titanic.drop('deck', axis=1, inplace=True)

# Verifying that there are no more missing values
titanic.isnull().sum()

"""## Exploratory Data Analysis (EDA)

EDA helps us understand the underlying patterns and relationships in the data. We'll explore:
- Survival rates based on gender and class.
- Age distribution of passengers.
- Fare distribution.
- Embarkation port preferences.

"""

# Survival rates by gender
sns.countplot(x='sex', hue='survived', data=titanic)
plt.title('Survival Count by Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.legend(title='Survived', labels=['No', 'Yes'])
plt.show()

# Survival rates by passenger class
sns.countplot(x='pclass', hue='survived', data=titanic)
plt.title('Survival Count by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Count')
plt.legend(title='Survived', labels=['No', 'Yes'])
plt.show()

# Age distribution of passengers
sns.histplot(titanic['age'], kde=True, bins=30)
plt.title('Age Distribution of Passengers')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Fare distribution
sns.histplot(titanic['fare'], kde=True, bins=30)
plt.title('Fare Distribution')
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.show()

# Embarkation port count
sns.countplot(x='embarked', data=titanic)
plt.title('Number of Passengers by Embarkation Port')
plt.xlabel('Embarkation Port')
plt.ylabel('Count')
plt.show()

"""## EDA Insights

- **Gender:** Females had a significantly higher survival rate compared to males.
- **Passenger Class:** 1st class passengers had the highest survival rate, followed by 2nd and 3rd class.
- **Age:** The majority of passengers were adults, with a smaller number of children.
- **Fare:** There's a wide range of fares, with most passengers paying between \$0 and \$100.
- **Embarkation Port:** Most passengers embarked from Southampton (S).

## Feature Engineering

To improve our machine learning model, we'll create additional features:
- **Family Size:** Combining `sibsp` and `parch` to represent the total number of family members aboard.
- **Is Alone:** Whether the passenger was alone or had family members aboard.
"""

# Creating 'family_size' by combining 'sibsp' and 'parch'
titanic['family_size'] = titanic['sibsp'] + titanic['parch'] + 1  # +1 for the passenger themselves

# Creating 'is_alone' feature
titanic['is_alone'] = titanic['family_size'].apply(lambda x: 1 if x == 1 else 0)

# Dropping unnecessary columns
titanic.drop(['sibsp', 'parch', 'alive', 'who', 'class'], axis=1, inplace=True)

# Displaying the first five rows with new features
titanic.head()

"""## Encoding Categorical Variables

Machine learning models require numerical input. We'll convert categorical variables into numerical representations:
- **Sex:** Encode as 0 (male) and 1 (female).
- **Embarked:** Use one-hot encoding for 'C', 'Q', 'S'.


"""

# Encoding 'sex' column
titanic['sex'] = titanic['sex'].map({'male': 0, 'female': 1})

# Displaying the first five rows after encoding
titanic.head()

import tensorflow as tf
print("GPU Available:", tf.config.list_physical_devices('GPU'))

from google.colab import drive
drive.mount('/content/drive')